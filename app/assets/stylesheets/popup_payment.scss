// function :: rem
@function rem($pixels, $context: 16) {
	@return #{$pixels/$context}rem;
}


// --------------------------------------------------------------------------------
// --------------------------------------------------------------------------------
// --------------------------------------------------------------------------------




// variable :: font
$font-base-stack: 'Spoqa Han Sans', 'Apple SD Gothic', sans-serif;
$em-font : 'Montserrat','Spoqa Han Sans', 'Apple SD Gothic', sans-serif;;

// font-weight
$light:100;
$regular:400;
$semi_bold:500;
$bold:700;

//color
$black:#000;
$white:#ffffff;

$xxxx-dark-gray:#0e0e0e;
$xxx-dark-gray:#161616;
$xx-dark-gray:#282828;
$x-dark-gray:#403e41;
$dark-gray:#5d5d5d;
$gray:#999;
$light-gray:#aaa;

$purple:#aa00ff;
$purple-light:#aa00ff;

$pink:#ff1f90;
$pink-gradient:linear-gradient(111deg, #ff606b, #ff1f90);	// only use background

$green:#79c720;
$red:#ff6b64;

// font-size
$xx-small:rem(10);
$x-small:rem(13);
$small:rem(14);
$normal:rem(16);
$large:rem(20);
$x-large:rem(24);
$xx-large:rem(28);
$xxx-large:rem(32);

//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------
//--------------------------------------------------------------------------------



// mixin :: for screen reader
@mixin screen_reader {
    border: 0;
    clip: rect(1px, 1px, 1px, 1px);
    clip-path: inset(50%);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute !important;
    width: 1px;
    word-wrap: normal !important;

    &:focus {
        background-color: #eee;
        clip: auto !important;
        clip-path: none;
        color: #444;
        display: block;
        font-size: 1em;
        height: auto;
        left: 5px;
        line-height: normal;
        padding: 15px 23px 14px;
        text-decoration: none;
        top: 5px;
        width: auto;
        z-index: 100000;
    }
}

// IR (image-replace)
@mixin ir() {
    text-indent:-999em;
    overflow:hidden;
    @content;
}

// floating clear
@mixin clear () {
	display:block;
	content:'';
	clear:both;
}


// media query
// variable :: width
$breakpoints: (
	'min': 700px,
	'max': 1000px
) !default;

$media-expressions: (
	'screen': 'screen',
	'print': 'print',
	'handheld': 'handheld',
	'retina2x': (
		'(-webkit-min-device-pixel-ratio: 2)',
		'(min-resolution: 192dpi)'
	),
	'retina3x': (
		'(-webkit-min-device-pixel-ratio: 3)',
		'(min-resolution: 350dpi)'
	)
) !default;

$unit-intervals: (
	'px': 1,
	'em': 0.01,
	'rem': 0.1
) !default;

@mixin media($conditions...) {
  @for $i from 1 through length($conditions) {
    $conditions: set-nth($conditions, $i, parse-expression(nth($conditions, $i)));
  }

  $branches: get-query-branches($conditions);
  $query: '';

  @each $branch in $branches {
    @if (str-length($query) != 0) {
      $query: $query + ', ';
    }

    $query: $query + $branch;
  }

  @media #{$query} {
    @content;
  }
}
@function get-query-branches($expressions) {
    $result: '';
    $has-groups: false;

    // Getting initial snapshot and looking for groups
    @each $expression in $expressions {
        @if (str-length($result) != 0) {
            $result: $result + ' and ';
        }

        @if (type-of($expression) == 'string') {
            $result: $result + $expression;
        } @else if (type-of($expression) == 'list') {
            $result: $result + nth($expression, 1);
            $has-groups: true;
        } @else {
            @warn '#{$expression} is not a valid expression.';
        }
    }

    // If we have groups, we have to create all possible combinations
    @if $has-groups {
        @each $expression in $expressions {
            @if (type-of($expression) == 'list') {
                $first: nth($expression, 1);

                @each $member in $expression {
                    @if ($member != $first) {
                        @each $partial in $result {
                            $result: join($result, str-replace-first($first, $member, $partial));
                        }
                    }
                }
            }
        }
    }
    @return $result;
}

@function parse-expression($expression) {
    $operator: '';
    $value: '';
    $element: '';
    $result: '';
    $is-width: true;

    @if (type-of($expression) != 'string') {
        @warn 'Expression with type `#{type-of($expression)}` detected, string expected.';
    }

    // Separating the operator from the rest of the expression
    @if (str-slice($expression, 2, 2) == '=') {
        $operator: str-slice($expression, 1, 2);
        $value: str-slice($expression, 3);
    } @else {
        $operator: str-slice($expression, 1, 1);
        $value: str-slice($expression, 2);
    }

    // Checking what type of expression we're dealing with
    @if map-has-key($breakpoints, $value) {
        $result: map-get($breakpoints, $value);
    } @else if map-has-key($media-expressions, $expression) {
        $result: map-get($media-expressions, $expression);
        $is-width: false;
    } @else {
        $result: to-number($value);
    }

    @if ($is-width) {
        $unit: unit($result);
        $interval: 0;

        @if (map-has-key($unit-intervals, $unit)) {
            $interval: map-get($unit-intervals, $unit);
        } @else {
            @warn 'Unknown unit: #{$unit}';
        }

        @if ($operator == '>') {
            $element: '(min-width: #{$result + $interval})';
        } @else if ($operator == '<') {
            $element: '(max-width: #{$result - $interval})';
        } @else if ($operator == '>=') {
            $element: '(min-width: #{$result})';
        } @else if ($operator == '<=') {
            $element: '(max-width: #{$result})';
        } @else {
            @warn '#{$expression} is missing an operator.';
        }
    } @else {
        $element: $result;
    }

    @return $element;
}

@function str-replace-first($search, $replace, $subject) {
    $search-start: str-index($subject, $search);

    @if $search-start == null {
        @return $subject;
    }

    $result: str-slice($subject, 0, $search-start - 1);
    $result: $result + $replace;
    $result: $result + str-slice($subject, $search-start + str-length($search));

    @return $result;
}

@function to-number($string) {
    // Matrices
    $strings: '0' '1' '2' '3' '4' '5' '6' '7' '8' '9';
    $numbers:  0   1   2   3   4   5   6   7   8   9;

    // Result
    $result: 0;
    $divider: 0;
    $minus: false;

    // Looping through all characters
    @for $i from 1 through str-length($string) {
        $character: str-slice($string, $i, $i);
        $index: index($strings, $character);


        @if $character == '-' {
            $minus: true;
        }

        @else if $character == '.' {
            $divider: 1;
        }

        @else {
            @if type-of($index) != 'number' {
                $result: if($minus, $result * -1, $result);
                @return _length($result, str-slice($string, $i));
            }

            $number: nth($numbers, $index);

            @if $divider == 0 {
                $result: $result * 10;
            }

            @else {
                // Move the decimal dot to the left
                $divider: $divider * 10;
                $number: $number / $divider;
            }

            $result: $result + $number;
        }
    }

    @return if($minus, $result * -1, $result);
}

@function _length($number, $unit) {
    $strings: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';
    $units:   1px  1cm  1mm  1%  1ch  1pica  1in  1em  1rem  1pt  1pc  1ex  1vw  1vh  1vmin  1vmax;
    $index: index($strings, $unit);

    @if type-of($index) != 'number' {
        @warn 'Unknown unit `#{$unit}`.';
        @return false;
    }

    @return $number * nth($units, $index);
}

/*
.include-media-test {
    @include media("<=min") {
        background-color: #def;

        &:before {
            content: "<=min";
        }
    }

    @include media(">min") {
        background-color: #abc;

        &:before {
            content: ">min";
        }
    }

    @include media(">=815px", "<max") {
        background-color: #fed;

        &:before {
            content: ">=815px, <max";
        }
    }

    @include media(">=max") {
        background-color: #fab;

        &:before {
            content: ">=max";
        }
    }

    @include media("retina2x") {
        &:after {
            content: "Retina" !important;
        }
    }
}
*/

// reset
html, body, div, span, object, iframe, h1, h2, h3, h4, h5, h6, p, blockquote, pre, a, abbr, address, cite, code, del, dfn, em, font, img, ins, q, s, samp, strike, strong, sub, sup, dl, dt, dd, ol, ul, li, fieldset, form, label, legend {
    line-height: 1.3em;
    border: 0 none;
}

body {
    margin: 0 auto;
    font-size: 100%;
    line-height: 1.3em;
    font-family: $font-base-stack;
    word-break: normal;
    text-size-adjust: 100%;
}

sub,sup {
    font-family:inherit;
}

i {
	font-style:normal;
	font-size:inherit;
	font-family:inherit;
}

// for screen reader
.skip_nav {
    position: absolute;
    z-index: 9999;
    width: 100%;

    a {
        display: block;
        overflow: hidden;
        width: inherit;
        height: 0;
        margin: 0 auto;
        height: 1px;
        margin-bottom: -1px;
        white-space: nowrap;
        text-align: center;
        text-indent: -9999px;
    }

    a:focus,
    a:active {
        height: 34px;
        padding: 1px;
        border-bottom: 2px solid #ebe8e7;
        background: #666;
        color: #333;
        font-weight: bold;
        font-size: 14px;
        text-indent: 0;
        line-height: 33px;
    }
}


// heading group
h1,h2,h3,h4,h5,h6 {
    font-family:inherit;
    line-height:1.1;
    font-weight:normal;
	margin:0;
}

h2 {
	font-weight:$light;
	color:$white;
	+ p {
		margin-top:10px;
		font-size:$small;	//default type
	}
}

h3 {
	font-weight:$light;
	color:$white
}



// zero club
h1,h2,h3,h4,h5,h6,
figure, figcaption,
dt,dd,dl,
iframe,
fieldset
{
    padding:0;
    margin:0;
}

iframe {
    border:0;
}

// typo
address, em {
    font-style:normal;
}

em {
    font-weight:500;
}


// Inheritance font size
input,textarea,table,th,td,fieldset,button,select {
	background-color:inherit;
    font-size:inherit;
}


// base ux feedback (GUI - mouse)
input[type='checkbox']+label,
input[type='radio']+label,
input[type="submit"],
button {
    cursor:pointer;
}




// --------------------------------------------------------------------------------
// --------------------------------------------------------------------------------
// --------------------------------------------------------------------------------





// link
a {
	color:inherit;
    cursor:pointer;
}

a:link {
    text-decoration:none;
}



// --------------------------------------------------------------------------------
// --------------------------------------------------------------------------------
// --------------------------------------------------------------------------------


// input
input[type="text"],
input[type="email"] {
	color:inherit;
	border-color:transparent;
}


input[type="email"]::placeholder {
	color:$gray;
}


input[type="number"] {
	&::-webkit-inner-spin-button,
	&::-webkit-outer-spin-button {
		-webkit-appearance: none;
		margin: 0;
	}
}

input[type='checkbox'] {
	@include screen_reader();
	visibility:hidden;

	+ label {

		transition:color 0.4s;
		&:before {
			content:'';
			vertical-align:calc((1em - 20px) / 2);
			display:inline-block;
			font-size:inherit;
			width:1rem;
			height:1rem;
			line-height:inherit;
			border-radius:2px;
			margin-right:0.6em;

			border:1px solid $dark-gray;
			transition:background-image 0.4s, background-color 0.2s;
		}

		// uncheck
		&:before {
			// background-color:$gray;
		}

	}

	+ label:hover,
	&:checked + label {
		color:$white;
	}

	&:checked {
		& + label:before {
			border-color:transparent;
			background:url('../image/check.svg') center center no-repeat $pink;
		}
	}
}

// button
button {
	color:inherit;
	border-color:transparent;
	outline:0;
}



// select
// --------------------------------------------------------------------------------
select {
	outline:0;
	-webkit-appearance: none;
	-moz-appearance: none;
}

select {
	color:$white;
	font-size:$small;
	height: 42px;

	display:inline-block;
	background: url(../image/icon-dropdown.svg) calc(100% - 16px) calc(50%) no-repeat #161616;
	background-size: 20px 20px;
	border:0;
	border-radius: 2px;
	width:160px;
	padding:0 14px;

	option:disabled {
		display:none;
	}
}




// --------------------------------------------------------------------------------
// --------------------------------------------------------------------------------
// --------------------------------------------------------------------------------


// table
// reset to related table
table {
    border-collapse: collapse;
	border-spacing: 0;
    width:100%;

    th:first-letter {
        text-transform:uppercase;
    }

	caption {
		@include screen_reader();
	}
}

// for eoshub.io
table {
	border-collapse:collapse;
	background-color:$xxx-dark-gray;

	thead tr {
		border-bottom:1px solid $xx-dark-gray;
	}

	th,td {
		padding:16px 12px;;
	}

	th {
		font-size:$small;
		color:$white;
		font-weight:$light;
		text-align:left;
		&:first-child {
			text-align:center;
		}
	}

	td {
		font-size:$x-small;
		em {
			color:$pink;
		}
	}

	td:first-child {
		text-align:center;
	}

	tbody tr {
		border-top:1px solid $xxxx-dark-gray;
	}

}


button[type='button'],
a.button,
input[type='submit'] {
	// reset
	cursor:pointer;
	border-width:0;
	border-style:solid;
	border-color:transparent;

	font-family:inherit;
	background-color:transparent;

	appearance:none;

	display:inline-block;
	line-height:1.1;
	box-sizing:border-box;
	text-align: center;
	font-family:inherit;
	border-radius:0;
	padding:0;

	&:first-letter {
		text-transform:uppercase;
	}
}

button[type="button"].button,
a.button {
	// flex:1;
	outline:0;
	display:inline-block;
	border-radius: 2px;

	font-size:$small;

	transition:background-color 0.3s, color 0.3s, background-image 0.3s;

	// size
	&.ok,
	&.undo,
	&.choice,
	&.tab,
	&.login,
	&.go.main,
	&.copy {
		line-height:50px;
		height: 52px;
	}

	// type case
	&.ok,
	&.login {
		background-image: $pink-gradient;
		color:$white;
		border-width:0;
	}

	&.undo,
	&.choice,
	&.join,
	&.copy {
		border:1px solid $gray;
	}

	&.choice.ing,
	&.go.main {
		color:$white;
		border-color:transparent;
		background-color:$x-dark-gray;
	}

	// pesudo deco
	&:disabled {
		color:$dark-gray;
		border-color:$dark-gray;
		background:transparent;
		border:1px solid $dark-gray;
		cursor:not-allowed;
	}

	&.select,
	&.view_more,
	&.action {
		padding:0 40px;
		height: 52px;
		border-radius: 2px;
		background-color: $xxxx-dark-gray;
		min-width:152px;
	}

	&.view_more {
		transition:color 0.2s;

		&:before {
			content:'+ ';
		}

		&.loading {
			position:relative;
			color:$xxxx-dark-gray;
			&:after {
				content:'';
				position:absolute;
				width:24px;
				height:24px;
				top:50%;
				left:50%;
				margin:-12px 0 0 -12px;
				border:3px solid $gray;
				border-right-color:transparent;
				border-radius:100%;
				animation:rotation 1s linear infinite;
				box-sizing:border-box;
			}
			@keyframes rotation {
				0% {
					transform:rotate(0deg);
				}

				100% {
					transform:rotate(360deg);
				}
			}
		}
	}
}



$header_height:64px;
$lnb_width:60px;
$browser_min_width:1260px;
$browser_min_height:580px;

// --------------------------------------------------------------------------------

html,body {
	height:100%;
}

body {
	overflow-y:scroll;
}

div#elm-target {
	height:100vh;
	box-sizing:border-box;

	min-width:$browser_min_width;
	min-height:$browser_min_height;
}

body {
	color:#999;
	background-color:#161616;
}


// --------------------------------------------------------------------------------
// layout
// just only one element in SPA
// --------------------------------------------------------------------------------

header {
	position:fixed;
	top:0;
	left:0;
	right:0;
	height:$header_height;
	z-index:60;
}

nav {
	position:fixed;
	width:$lnb_width;
	height:inherit;
	top:$header_height;
	left:0;
	bottom:0;
	z-index:50;
}

footer {
	position:fixed;
	width:$lnb_width;
	left:0;
	bottom:0;
	z-index:50;
}


// --------------------------------------------------------------------------------
// content > aside(status section) + main
// --------------------------------------------------------------------------------
section.content {
	box-sizing:border-box;

	display:flex;
	justify-content:center;

	padding-top:$header_height;

	// gnb가 있는 경우에만 필요함
	nav ~ & {
		padding-left:$lnb_width;
	}

	main.index,
	main.transfer,
	main.search,
	main.ram_market,
	main.vote,
	main.resource_management,
	main.account,
	main.error_404 {
		height:inherit;
		box-sizing:border-box;
		padding:42px;

		@include media ('>1600px') {
			margin-left:calc(300px);
		}
		@include media ('>1280px','<=1600px') {
			padding: 2.425vw;
			margin-left:calc(18.75vw);
		}
		@include media ('<=1280px') {
			padding:27px;
			margin-left:240px;
		}

	}

	main.transfer,
	main.search,
	main.ram_market,
	main.vote,
	main.resource_management,
	main.account {
		padding-top:42px;
	}


	// width
	main.search,
	main.ram_market,
	main.index {
		max-width:1560px;
		width:80.425vw;
		min-width:965px;
	}

	main.transfer,
	main.vote,
	main.account,
	main.resource_management,
	main.error_404 {
		width:965px;
	}
	// // width

	aside {
		box-sizing:border-box;

		position:fixed;
		left:$lnb_width;
		top:$header_height;
		bottom:0;
		z-index:10;

		max-width:300px;
		min-width:240px;
		width:18.75vw;
	}
}



// --------------------------------------------------------------------------------
// fluid layout
// --------------------------------------------------------------------------------

aside {
	transition:transform 0.4s;

	&.shrink {
		transform:translateX(-100%);
	}
}

main.index,
main.transfer,
main.search,
main.ram_market,
main.vote,
main.resource_management ,
main.account,
main.error_404 {
	transition:margin 0.4s;
}

aside.shrink {
	+ main.index,
	+ main.transfer,
	+ main.search,
	+ main.ram_market,
	+ main.vote,
	+ main.resource_management ,
	+ main.account,
	+ main.error_404 {
		margin-left:0;
	}
}




// --------------------------------------------------------------------------------
// --------------------------------------------------------------------------------
// --------------------------------------------------------------------------------




// tab view
div.tab {

	// basement
	box-sizing:border-box;
	display:flex;

	a,
	button {
		flex:1 0 50%;
		height:52px;
		line-height:50px;
		background-color:$xx-dark-gray;
		border-top:2px solid transparent;

		padding:0 35px;

		text-align:center;
		border-radius:0;

		&.ing {
			border-top:2px solid $pink;
			background-color:$xxxx-dark-gray;
			color:$white;
		}
	}
}



// --------------------------------------------------------------------------------
// --------------------------------------------------------------------------------
// --------------------------------------------------------------------------------



// --------------------------------------------------------------------------------
// error case :: 404
// --------------------------------------------------------------------------------
section.content main.error_404 {
	position:relative;
	height:calc(100vh - #{$header_height});
}

section.error.message.wrapper {
	position:absolute;
	top:calc(50% - 6vh);
	left:50%;
	transform:translate(-50%,-50%);

	&:before {
		content:'';
		background:url('../image/bnr-404@2x.png') center center no-repeat transparent;
		background-size:contain;
		display:block;
		width:381px;
		height:251px;
	}
	h2 {
		margin-top:20px;
		text-align:center;
		font-size:$x-large;
	}
}

// var
$header_height:64px;
$lnb_width:60px;
$browser_min_width:1260px;
$browser_min_height:580px;

// --------------------------------------------------------------------------------
// modal popup
// --------------------------------------------------------------------------------
body {
	overflow:hidden;
}

.modal.popup {
	position:fixed;
	background-color: rgba(0, 0, 0, 0.64);

	top:0;
	right:0;
	bottom:0;
	left:0;

	// 가입 프로세스
	p {
		line-height:1.6;

		> strong {
			color:$white;
			font-weight:$light;
			margin-right:0.1em;
		}
	}

	// superset
	.wrapper {
		top:50%;
		background-color:$x-dark-gray;

		position:absolute;
		left:50%;
		min-width:386px;
		width:30.15625%;
		max-width:500px;
		border-radius:4px;

		padding:32px 0;
		box-sizing:border-box;
		z-index:100;
		transform:translate(-50%, -50%);

		h2 {
			margin-left:32px;
			+ p {
				margin-left:32px;
			}
		}
	}

	button.close {
		position:absolute;
		top:32px;
		right:32px;

		width:18px;
		height:18px;

		@include ir();

		background:url('icon-close-popup.svg') center center no-repeat transparent;
		background-size:contain;
		outline:0;

		transition:transform 0.2s;

		&:hover {
			transform:scale(1.2);
		}
	}
}

// for payment (ruby)

// virtual account deposit
.modal.popup.virtual_account_check {

	.wrapper {
		background-color:$xx-dark-gray;
	}

	dl {
		margin: 32px;
		background-color:$xxx-dark-gray;
		display:grid;
		grid-template-columns:50% 50%;
		padding:12px 24px;
		font-size:$small;

		* {
			padding:6px 0;
		}

		dt {
			color:$white;
			text-align:left;
		}
		dd {
			text-align:right;
			word-break:break-all;
		}
	}

	dl + .btn_area {
		margin:16px 32px;
		display:flex;
		button {
			flex:1;
		}
	}
}
// type case
